<?php

namespace SB\Bundle\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends EntityRepository
{
    public function fetchAll($id_user, array $list_friends, $limit, $activity_last_id = null)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.user = :id_user')
        ;
        if (!empty($list_friends)) {
            foreach ($list_friends as $key => $friend) {
                $qb
                    ->orWhere('a.user = :friend' . $key)
                        ->setParameter('friend' . $key, $friend->getId())
                ;
            }
        }
        if (!is_null($activity_last_id)) {
            $this->getOlderActivity($qb, $activity_last_id);
        }
        $qb
            ->leftJoin('a.image', 'i')
                ->addSelect('i')
            ->leftJoin('a.likes', 'l', 'WITH', 'l.user = :id_user')
                ->addSelect('l')
            ->setParameter('id_user', $id_user)
            ->orderBy('a.dateActivity', 'DESC')
            ->setMaxResults($limit)
        ;

        return $qb->getQuery()->getResult();
    }

    private function getOlderActivity(QueryBuilder $qb, $activity_last_id)
    {
        $qb
            ->andWhere('a.id < :activity_last_id')
                ->setParameter('activity_last_id', $activity_last_id)
        ;
    }

    public function countAll($id_user, array $list_friends)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->select('COUNT(a)')
            ->where('a.user = :id_user')
                ->setParameter('id_user', $id_user)
        ;

        if (!empty($list_friends)) {
            foreach ($list_friends as $key => $friend) {
                $qb
                    ->orWhere('a.user = :friend' . $key)
                    ->setParameter('friend' . $key, $friend->getId())
                ;
            }
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
}
